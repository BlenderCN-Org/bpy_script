import bpy
from mathutils import Vector

fontdict = {}
for c in bpy.data.curves[1:]:
    fontdict[c.name] = []
    for idx, spline in enumerate(c.splines):
        stroke = [p.co.to_tuple() for p in spline.points]
        fontdict[c.name].append(stroke)


fdict = {
    'a': 'NurbsPath.001',
    'b': 'NurbsPath.002',
    'c': 'NurbsPath.003',
    'd': 'NurbsPath.004',
    'e': 'NurbsPath.005',
    'f': 'NurbsPath.006',
    'g': 'NurbsPath.007',
    'h': 'NurbsPath.008',
    'i': 'NurbsPath.009',
    'j': 'NurbsPath.010',
    'k': 'NurbsPath.011',
    'l': 'NurbsPath.012',
    'm': 'NurbsPath.013',         
    'n': 'NurbsPath.014',
    'o': 'NurbsPath.015',
    'p': 'NurbsPath.016',
    'q': 'NurbsPath.017',
    'r': 'NurbsPath.018',
    's': 'NurbsPath.019',
    't': 'NurbsPath.020',
    'u': 'NurbsPath.021',
    'v': 'NurbsPath.022',
    'w': 'NurbsPath.023',
    'x': 'NurbsPath.024',
    'y': 'NurbsPath.025',
    'z': 'NurbsPath.026',
    '0': 'NurbsPath.027',
    '1': 'NurbsPath.028',
    '2': 'NurbsPath.029',
    '3': 'NurbsPath.030',
    '4': 'NurbsPath.031',
    '5': 'NurbsPath.032',
    '6': 'NurbsPath.033',
    '7': 'NurbsPath.034',
    '8': 'NurbsPath.035',
    '9': 'NurbsPath.036',
    'excl': 'NurbsPath.037',
    'qmark': 'NurbsPath.038',
    'hash': 'NurbsPath.039',
    'procent': 'NurbsPath.040',
    'and': 'NurbsPath.041',
    'dolr': 'NurbsPath.042',
    'at': 'NurbsPath.043',
    'star': 'NurbsPath.044',
    'dot': 'NurbsPath.052',
    'comma': 'NurbsPath.053',
    'left_curly': 'NurbsPath.045',
    'left_paren': 'NurbsPath.046',
    'fw_slash': 'NurbsPath.047',
    'pipe': 'NurbsPath.048',
    "bk_slash": 'NurbsPath.049',
    'right_paren': 'NurbsPath.050',
    'right_curly': 'NurbsPath.051'
}

def font_map(ch, fontdict):
    remapable = fdict.get(ch, None)
    if remapable:
        print(remapable)
        return fontdict.get(remapable, "")
    else:
        print(repr(ch), 'not found in charmap')
    
    return 


def generate_greasepencil(text, col, pxwide, pos, fontdict):

    line_height = 38
    char_width = pxwide

    spaces = 0
    yof = 0
    xof = 0
    bcx, bcy = pos
    
    nt = bpy.data.node_groups['NodeTree.002']
    gp = nt.grease_pencil = bpy.data.grease_pencil.new('temp')
    layer = gp.layers.new('damzel')
    layer.line_width = 1
    layer.frames.new(1)

    for ch in text:
        if ch == "\n":
            yof -= line_height
            xof = 0
            continue
        
        if ch == " ":
            xof += char_width
            continue
        
        schars = [i for i in "!?#%&$@*.,"]
        symbols_list = [
            'excl', 'qmark', 'hash', 'procent',
            'and', 'dolr', 'at', 'star', 'dot', 'comma'
            ]
        tch = {idx: xchar for idx, xchar in zip([ord(i) for i in schars], symbols_list)}.get(ord(ch), 0)

        if tch:
            print('----- ', tch)
            ch = fdict[tch]
            print('ch:', ch)
            v = fontdict.get(ch, 0)
            print(v)
        else:
            print('------------', ch)
            char_as_int = ord(ch)
            chars = ['left_curly','left_paren', 'fw_slash', 'pipe',
                "bk_slash", 'right_paren', 'right_curly']
            
            tchars = "{(/|\})"
            if ch in tchars:
                print(ord(i))
                ch = {ord(i): j for i, j in zip(tchars, chars)}.get(ord(ch), 0)

            print(ch)

            v = font_map(ch, fontdict)
            
        if not v:
            print('>>>>', repr(v))
            xof += char_width
            continue

        print('<<< ', ch)
        for chain in v:
            s = layer.frames[0].strokes.new()
            s.draw_mode = '2DSPACE'
            s.points.add(len(chain))
            for idx, p in enumerate(chain):
                ap = Vector(p)*25
                x, y = ap[:2]
                xyz = ((x+bcx+xof), (y+bcy+yof), 0)
                s.points[idx].co = xyz

        xof += char_width


'''
- no case sensitivity yet, use all lowercase for now. it will output title case.
-  \n  is newline

'''

text = """
this text was generated by grease pencil


vectorized!!

"""

col = []
pxwide = 28
pos = 50, 50

generate_greasepencil(text, col, pxwide, pos, fontdict)